{"version":3,"file":"static/js/676.d5fd8ed7.chunk.js","mappings":"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","sources":["utils/api.js","pages/InquiryAdminPage.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:5000\",\r\n});\r\n\r\nexport default api;\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  IconButton,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport { Edit, Delete, Download } from \"@mui/icons-material\";\r\nimport api from \"../utils/api\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nconst BACKEND_API = process.env.REACT_APP_BACKEND_API;\r\n\r\n// Helper function to format datetime\r\nfunction formatDateTime(dateString) {\r\n  if (!dateString) return \"N/A\";\r\n  const date = new Date(dateString);\r\n  const yyyy = date.getFullYear();\r\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const dd = String(date.getDate()).padStart(2, \"0\");\r\n  const hh = String(date.getHours()).padStart(2, \"0\");\r\n  const min = String(date.getMinutes()).padStart(2, \"0\");\r\n  const ss = String(date.getSeconds()).padStart(2, \"0\");\r\n  return `${yyyy}-${mm}-${dd} ${hh}:${min}:${ss}`;\r\n}\r\n\r\nexport default function InquiryAdminPage() {\r\n  const [inquiries, setInquiries] = useState([]);\r\n  const [editId, setEditId] = useState(null);\r\n  const [editData, setEditData] = useState({});\r\n  const [search, setSearch] = useState(\"\");\r\n  const [pageSize, setPageSize] = useState(3);\r\n\r\n  const fetchInquiries = async () => {\r\n    const res = await api.get(`${BACKEND_API}/api/inquiries`);\r\n    setInquiries(res.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchInquiries();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Debug: log inquiries to check for createdAt\r\n    console.log(\"Fetched inquiries:\", inquiries);\r\n  }, [inquiries]);\r\n\r\n  const handleDelete = async (id) => {\r\n    await api.delete(`${BACKEND_API}/api/inquiries/${id}`);\r\n    fetchInquiries();\r\n  };\r\n\r\n  const handleEdit = (inquiry) => {\r\n    setEditId(inquiry._id);\r\n    setEditData({ ...inquiry });\r\n  };\r\n\r\n  const handleEditChange = (e) => {\r\n    setEditData({ ...editData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleEditSave = async () => {\r\n    await api.put(`${BACKEND_API}/api/inquiries/${editId}`, editData);\r\n    setEditId(null);\r\n    fetchInquiries();\r\n  };\r\n\r\n  // DataGrid columns\r\n  const columns = [\r\n    {\r\n      field: \"name\",\r\n      headerName: \"Name\",\r\n      flex: 1,\r\n      filterable: true,\r\n      editable: false,\r\n      renderCell: (params) =>\r\n        editId === params.row._id ? (\r\n          <TextField\r\n            name=\"name\"\r\n            value={editData.name || \"\"}\r\n            onChange={handleEditChange}\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n          />\r\n        ) : (\r\n          params.value\r\n        ),\r\n    },\r\n    {\r\n      field: \"email\",\r\n      headerName: \"Email\",\r\n      flex: 1,\r\n      filterable: true,\r\n      editable: false,\r\n      renderCell: (params) =>\r\n        editId === params.row._id ? (\r\n          <TextField\r\n            name=\"email\"\r\n            value={editData.email || \"\"}\r\n            onChange={handleEditChange}\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n          />\r\n        ) : (\r\n          params.value\r\n        ),\r\n    },\r\n    {\r\n      field: \"phone\",\r\n      headerName: \"Phone\",\r\n      flex: 1,\r\n      filterable: true,\r\n      editable: false,\r\n      renderCell: (params) =>\r\n        editId === params.row._id ? (\r\n          <TextField\r\n            name=\"phone\"\r\n            value={editData.phone || \"\"}\r\n            onChange={handleEditChange}\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n          />\r\n        ) : (\r\n          params.value\r\n        ),\r\n    },\r\n    {\r\n      field: \"message\",\r\n      headerName: \"Message\",\r\n      flex: 2,\r\n      filterable: true,\r\n      editable: false,\r\n      renderCell: (params) =>\r\n        editId === params.row._id ? (\r\n          <TextField\r\n            name=\"message\"\r\n            value={editData.message || \"\"}\r\n            onChange={handleEditChange}\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n            multiline\r\n            minRows={2}\r\n          />\r\n        ) : (\r\n          params.value\r\n        ),\r\n    },\r\n    {\r\n      field: \"createdAt\",\r\n      headerName: \"createdAt\",\r\n      flex: 1,\r\n      filterable: true,\r\n      editable: false,\r\n      renderCell: (params) =>\r\n        editId === params.row._id ? (\r\n          <TextField\r\n            name=\"message\"\r\n            value={editData.createdAt || \"\"}\r\n            onChange={handleEditChange}\r\n            size=\"small\"\r\n            variant=\"standard\"\r\n            multiline\r\n            minRows={2}\r\n          />\r\n        ) : (\r\n          params.value\r\n        ),\r\n    },\r\n\r\n    {\r\n      field: \"actions\",\r\n      headerName: \"Actions\",\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => (\r\n        <>\r\n          {editId === params.row._id ? (\r\n            <>\r\n              <Button onClick={handleEditSave} color=\"primary\">\r\n                Save\r\n              </Button>\r\n              <Button onClick={() => setEditId(null)} color=\"secondary\">\r\n                Cancel\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <IconButton\r\n                onClick={() => handleEdit(params.row)}\r\n                aria-label=\"edit\"\r\n              >\r\n                <Edit />\r\n              </IconButton>\r\n              <IconButton\r\n                onClick={() => handleDelete(params.row._id)}\r\n                aria-label=\"delete\"\r\n              >\r\n                <Delete />\r\n              </IconButton>\r\n            </>\r\n          )}\r\n        </>\r\n      ),\r\n      width: 160,\r\n    },\r\n  ];\r\n\r\n  // Filtering/search logic\r\n  const filteredRows = useMemo(() => {\r\n    if (!search) return inquiries;\r\n    return inquiries.filter((inq) => {\r\n      const s = search.toLowerCase();\r\n      return (\r\n        inq.name?.toLowerCase().includes(s) ||\r\n        inq.email?.toLowerCase().includes(s) ||\r\n        inq.phone?.toLowerCase().includes(s) ||\r\n        inq.message?.toLowerCase().includes(s)\r\n      );\r\n    });\r\n  }, [inquiries, search]);\r\n\r\n  // CSV export data\r\n  const csvData = filteredRows.map((inq) => ({\r\n    Name: inq.name,\r\n    Email: inq.email,\r\n    Phone: inq.phone,\r\n    Message: inq.message,\r\n    \"Created At\": formatDateTime(inq.createdAt),\r\n  }));\r\n\r\n  // PDF export\r\n  const handleExportPDF = async () => {\r\n    const jsPDF = (await import(\"jspdf\")).default;\r\n    const autoTable = (await import(\"jspdf-autotable\")).default;\r\n    const doc = new jsPDF();\r\n    doc.text(\"Inquiries\", 14, 10);\r\n    autoTable(doc, {\r\n      head: [[\"Name\", \"Email\", \"Phone\", \"Message\", \"CreateAt\"]],\r\n      body: filteredRows.map((inquiry) => [\r\n        inquiry.name,\r\n        inquiry.email,\r\n        inquiry.phone,\r\n        inquiry.message,\r\n        inquiry.createdAt,\r\n      ]),\r\n    });\r\n    doc.save(\"inquiries.pdf\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box p={3}>\r\n        <Typography variant=\"h6\" mb={2}>\r\n          Business Inquiry\r\n        </Typography>\r\n        <Stack direction=\"row\" spacing={2} mb={2}>\r\n          <TextField\r\n            label=\"Search\"\r\n            value={search}\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            size=\"small\"\r\n          />\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<Download />}\r\n            component={CSVLink}\r\n            data={csvData}\r\n            filename=\"inquiries.csv\"\r\n          >\r\n            Export CSV\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            startIcon={<Download />}\r\n            onClick={handleExportPDF}\r\n          >\r\n            Export PDF\r\n          </Button>\r\n        </Stack>\r\n        <Box sx={{ height: 400, width: \"100%\" }}>\r\n          <DataGrid\r\n            rows={filteredRows.map((row) => ({\r\n              ...row,\r\n              id: row._id,\r\n              createdAt: row.createdAt || null,\r\n            }))}\r\n            columns={columns}\r\n            pageSize={pageSize}\r\n            onPageSizeChange={(newSize) => setPageSize(newSize)}\r\n            rowsPerPageOptions={[3, 6, 9, 15]}\r\n            pagination\r\n            components={{ Toolbar: GridToolbar }}\r\n            disableSelectionOnClick\r\n            autoHeight\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n"],"names":["axios","create","baseURL","BACKEND_API","process","formatDateTime","dateString","date","Date","yyyy","getFullYear","mm","String","getMonth","padStart","dd","getDate","hh","getHours","min","getMinutes","ss","getSeconds","concat","InquiryAdminPage","inquiries","setInquiries","useState","editId","setEditId","editData","setEditData","search","setSearch","pageSize","setPageSize","fetchInquiries","async","res","api","get","data","useEffect","console","log","handleEditChange","e","_objectSpread","target","name","value","handleEditSave","put","columns","field","headerName","flex","filterable","editable","renderCell","params","row","_id","_jsx","TextField","onChange","size","variant","email","phone","message","multiline","minRows","createdAt","sortable","_Fragment","children","_jsxs","Button","onClick","color","IconButton","handleEdit","inquiry","Edit","delete","id","handleDelete","Delete","width","filteredRows","useMemo","filter","inq","_inq$name","_inq$email","_inq$phone","_inq$message","s","toLowerCase","includes","csvData","map","Name","Email","Phone","Message","Box","p","Typography","mb","Stack","direction","spacing","label","startIcon","Download","component","CSVLink","filename","jsPDF","default","autoTable","doc","text","head","body","save","sx","height","DataGrid","rows","onPageSizeChange","newSize","rowsPerPageOptions","pagination","components","Toolbar","GridToolbar","disableSelectionOnClick","autoHeight"],"sourceRoot":""}